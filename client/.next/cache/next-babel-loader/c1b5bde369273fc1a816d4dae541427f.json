{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Acer\\\\Desktop\\\\nextjs-blog\\\\pages\\\\_app.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\";\nimport \"../styles/global.css\";\nimport \"../styles/home.css\";\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { faEnvelope, faKey } from \"@fortawesome/free-solid-svg-icons\";\nimport { Provider } from \"react-redux\";\nimport store from \"../store\";\nlibrary.add(faEnvelope, faKey);\n\nclass App {\n  static async getInitialProps({\n    Component,\n    ctx\n  }) {\n    const pageProps = Component.getInitialProps ? await Component.getInitialProps(ctx) : {}; //Anything returned here can be accessed by the client\n\n    return {\n      pageProps: pageProps\n    };\n  }\n\n  render() {\n    //pageProps that were returned  from 'getInitialProps' are stored in the props i.e. pageprops\n    const {\n      Component,\n      pageProps,\n      store\n    } = this.props;\n    return __jsx(Provider, {\n      store: store,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 11\n      }\n    }, __jsx(Component, _extends({}, pageProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 15\n      }\n    })));\n  }\n\n} //makeStore function that returns a new store for every request\n\n\nconst makeStore = () => store; //withRedux wrapper that passes the store to the App Component\n\n\nexport default withRedux(makeStore)(App);","map":{"version":3,"sources":["C:/Users/Acer/Desktop/nextjs-blog/pages/_app.js"],"names":["React","library","faEnvelope","faKey","Provider","store","add","App","getInitialProps","Component","ctx","pageProps","render","props","makeStore","withRedux"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,sBAAP;AACA,OAAO,oBAAP;AACA,SAASC,OAAT,QAAwB,mCAAxB;AACA,SAASC,UAAT,EAAqBC,KAArB,QAAkC,mCAAlC;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACAJ,OAAO,CAACK,GAAR,CAAYJ,UAAZ,EAAwBC,KAAxB;;AAEA,MAAOI,GAAP,CAAW;AAET,eAAaC,eAAb,CAA6B;AAACC,IAAAA,SAAD;AAAYC,IAAAA;AAAZ,GAA7B,EAA+C;AAC3C,UAAMC,SAAS,GAAGF,SAAS,CAACD,eAAV,GAA4B,MAAMC,SAAS,CAACD,eAAV,CAA0BE,GAA1B,CAAlC,GAAmE,EAArF,CAD2C,CAG3C;;AACA,WAAO;AAACC,MAAAA,SAAS,EAAEA;AAAZ,KAAP;AACH;;AAEDC,EAAAA,MAAM,GAAG;AACL;AACA,UAAM;AAACH,MAAAA,SAAD;AAAYE,MAAAA,SAAZ;AAAuBN,MAAAA;AAAvB,QAAgC,KAAKQ,KAA3C;AAEA,WACI,MAAC,QAAD;AAAU,MAAA,KAAK,EAAER,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,MAAC,SAAD,eAAeM,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADJ,CADJ;AAKH;;AAlBQ,C,CAqBX;;;AACA,MAAMG,SAAS,GAAG,MAAMT,KAAxB,C,CAEA;;;AACA,eAAeU,SAAS,CAACD,SAAD,CAAT,CAAqBP,GAArB,CAAf","sourcesContent":["import React from \"react\";\r\nimport \"../styles/global.css\";\r\nimport \"../styles/home.css\";\r\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\r\nimport { faEnvelope, faKey } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"../store\";\r\nlibrary.add(faEnvelope, faKey);\r\n\r\nclass  App {\r\n\r\n  static async getInitialProps({Component, ctx}) {\r\n      const pageProps = Component.getInitialProps ? await Component.getInitialProps(ctx) : {};\r\n\r\n      //Anything returned here can be accessed by the client\r\n      return {pageProps: pageProps};\r\n  }\r\n\r\n  render() {\r\n      //pageProps that were returned  from 'getInitialProps' are stored in the props i.e. pageprops\r\n      const {Component, pageProps, store} = this.props;\r\n\r\n      return (\r\n          <Provider store={store}>\r\n              <Component {...pageProps}/>\r\n          </Provider>\r\n      );\r\n  }\r\n}\r\n\r\n//makeStore function that returns a new store for every request\r\nconst makeStore = () => store;\r\n\r\n//withRedux wrapper that passes the store to the App Component\r\nexport default withRedux(makeStore)(App);\r\n"]},"metadata":{},"sourceType":"module"}