{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { Component } from \"react\";\nimport \"../styles/global.css\"; //import \"../styles/home.css\";\n\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { faEnvelope, faKey } from \"@fortawesome/free-solid-svg-icons\";\nimport { Provider } from \"react-redux\";\nimport withRedux, { createWrapper } from \"next-redux-wrapper\";\nimport store from \"../store\";\nimport App from \"next/app\";\nlibrary.add(faEnvelope, faKey); // import \"../css/antd.less\";\n// import \"../styles/home.less\";\n\nclass MyApp extends App {\n  static async getInitialProps({\n    Component,\n    ctx\n  }) {\n    const pageProps = Component.getInitialProps ? await Component.getInitialProps(ctx) : {}; //Anything returned here can be accessed by the client\n\n    return {\n      pageProps: pageProps\n    };\n  }\n\n  render() {\n    //pageProps that were returned  from 'getInitialProps' are stored in the props i.e. pageprops\n    const {\n      Component,\n      pageProps\n    } = this.props;\n    return __jsx(Provider, {\n      store: store\n    }, __jsx(Component, pageProps));\n  }\n\n} //makeStore function that returns a new store for every request\n\n\nconst makeStore = () => store;\n\nconst Wrapper = createWrapper(makeStore); //withRedux wrapper that passes the store to the App Component\n\nexport default Wrapper.withRedux(MyApp);","map":null,"metadata":{},"sourceType":"module"}