{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Acer\\\\Desktop\\\\nextjs-blog\\\\pages\\\\_app.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\";\nimport \"../styles/global.css\";\nimport \"../styles/home.css\";\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { faEnvelope, faKey } from \"@fortawesome/free-solid-svg-icons\";\nimport { Provider } from \"react-redux\";\nimport withRedux from \"next-redux-wrapper\";\nimport store from \"../store\";\nlibrary.add(faEnvelope, faKey);\n\nclass App extends Com {\n  static async getInitialProps({\n    Component,\n    ctx\n  }) {\n    const pageProps = Component.getInitialProps ? await Component.getInitialProps(ctx) : {}; //Anything returned here can be accessed by the client\n\n    return {\n      pageProps: pageProps\n    };\n  }\n\n  render() {\n    //pageProps that were returned  from 'getInitialProps' are stored in the props i.e. pageprops\n    const {\n      Component,\n      pageProps,\n      store\n    } = this.props;\n    return __jsx(Provider, {\n      store: store,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 7\n      }\n    }, __jsx(Component, _extends({}, pageProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }\n    })));\n  }\n\n} //makeStore function that returns a new store for every request\n\n\nconst makeStore = () => store; //withRedux wrapper that passes the store to the App Component\n\n\nexport default withRedux(makeStore)(App);","map":{"version":3,"sources":["C:/Users/Acer/Desktop/nextjs-blog/pages/_app.js"],"names":["React","library","faEnvelope","faKey","Provider","withRedux","store","add","App","Com","getInitialProps","Component","ctx","pageProps","render","props","makeStore"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,sBAAP;AACA,OAAO,oBAAP;AACA,SAASC,OAAT,QAAwB,mCAAxB;AACA,SAASC,UAAT,EAAqBC,KAArB,QAAkC,mCAAlC;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACAL,OAAO,CAACM,GAAR,CAAYL,UAAZ,EAAwBC,KAAxB;;AAEA,MAAMK,GAAN,SAAkBC,GAAlB,CAAsB;AACpB,eAAaC,eAAb,CAA6B;AAAEC,IAAAA,SAAF;AAAaC,IAAAA;AAAb,GAA7B,EAAiD;AAC/C,UAAMC,SAAS,GAAGF,SAAS,CAACD,eAAV,GACd,MAAMC,SAAS,CAACD,eAAV,CAA0BE,GAA1B,CADQ,GAEd,EAFJ,CAD+C,CAK/C;;AACA,WAAO;AAAEC,MAAAA,SAAS,EAAEA;AAAb,KAAP;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP;AACA,UAAM;AAAEH,MAAAA,SAAF;AAAaE,MAAAA,SAAb;AAAwBP,MAAAA;AAAxB,QAAkC,KAAKS,KAA7C;AAEA,WACE,MAAC,QAAD;AAAU,MAAA,KAAK,EAAET,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,SAAD,eAAeO,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADF,CADF;AAKD;;AAnBmB,C,CAsBtB;;;AACA,MAAMG,SAAS,GAAG,MAAMV,KAAxB,C,CAEA;;;AACA,eAAeD,SAAS,CAACW,SAAD,CAAT,CAAqBR,GAArB,CAAf","sourcesContent":["import React from \"react\";\r\nimport \"../styles/global.css\";\r\nimport \"../styles/home.css\";\r\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\r\nimport { faEnvelope, faKey } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { Provider } from \"react-redux\";\r\nimport withRedux from \"next-redux-wrapper\";\r\nimport store from \"../store\";\r\nlibrary.add(faEnvelope, faKey);\r\n\r\nclass App extends Com {\r\n  static async getInitialProps({ Component, ctx }) {\r\n    const pageProps = Component.getInitialProps\r\n      ? await Component.getInitialProps(ctx)\r\n      : {};\r\n\r\n    //Anything returned here can be accessed by the client\r\n    return { pageProps: pageProps };\r\n  }\r\n\r\n  render() {\r\n    //pageProps that were returned  from 'getInitialProps' are stored in the props i.e. pageprops\r\n    const { Component, pageProps, store } = this.props;\r\n\r\n    return (\r\n      <Provider store={store}>\r\n        <Component {...pageProps} />\r\n      </Provider>\r\n    );\r\n  }\r\n}\r\n\r\n//makeStore function that returns a new store for every request\r\nconst makeStore = () => store;\r\n\r\n//withRedux wrapper that passes the store to the App Component\r\nexport default withRedux(makeStore)(App);\r\n"]},"metadata":{},"sourceType":"module"}